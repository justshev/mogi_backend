import { GoogleGenAI } from "@google/genai";
import "dotenv/config";
const app = express();
app.use(express.json());

const genAI = new GoogleGenAI({
  apiKey: process.env.API_KEY, // Ganti dengan API Key yang aman di production
});

const model = "gemini-2.0-flash";
const config = {
  responseMimeType: "text/plain",
  systemInstruction: [
    {
      text: "Kamu adalah AI analis lingkungan. Tugasmu membaca data suhu dan kelembapan lalu memberikan prediksi pertumbuhan jamur dalam format JSON valid. Berikan hanya output JSON murni tanpa awalan, tanpa tanda backtick, tanpa komentar atau penjelasan tambahan. Harus bisa langsung diparsing dengan JSON.parse().",
    },
  ],
};

// Fungsi untuk mengekstrak JSON yang valid dari output AI
function extractJSON(text) {
  try {
    // Hapus tanda backtick atau komentar yang mungkin ada
    const cleanedText = text.replace(/
json|
/g, "").trim();

    // Menemukan dan mengembalikan JSON yang valid
    const jsonMatch = cleanedText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error("Tidak ditemukan JSON dalam respons");
    }

    return JSON.parse(jsonMatch[0]);
  } catch (err) {
    throw new Error(
      "Gagal mem-parsing JSON: " + err.message + "\nRaw output:\n" + text
    );
  }
}

// API Endpoint
app.post("/api/prediksi-jamur", async (req, res) => {
  const logs = req.body.logs;

  if (!Array.isArray(logs)) {
    return res.status(400).json({ error: "Body harus berisi array 'logs'" });
  }

  let prompt = "Berikut adalah kumpulan data suhu dan kelembapan:\n\n";
  logs.forEach((log, index) => {
    prompt += Data ${index + 1}: Suhu ${log.temperature}°C, Kelembapan ${
      log.humidity
    }%\n;
  });

  prompt += 
Berdasarkan data tersebut, berikan satu kesimpulan umum mengenai kemungkinan pertumbuhan jamur.

Balas hanya dengan JSON dengan struktur seperti ini:

{
  "kesimpulan": "Teks kesimpulan singkat",
  "skorPertumbuhan": angka dari 0 sampai 10,
  "tingkatRisiko": "rendah" | "sedang" | "tinggi",
  "saran": "Saran singkat untuk mengurangi atau mengontrol pertumbuhan jamur.",
  "deskripsi": "Penjelasan singkat mengapa kesimpulan tersebut diambil berdasarkan data."
}
;

  try {
    const response = await genAI.models.generateContentStream({
      model,
      config,
      contents: [
        {
          role: "user",
          parts: [{ text: prompt }],
        },
      ],
    });

    let result = "";
    for await (const chunk of response) {
      result += chunk.text;
    }

    // Ekstrak dan parse hasil output yang valid JSON
    const json = extractJSON(result);
    res.json(json);
  } catch (err) {
    console.error("❌ Error:", err.message);
    res
      .status(500)
      .json({ error: "Gagal menghasilkan prediksi", detail: err.message });
  }
});

// Jalankan server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(🚀 Server berjalan di http://localhost:${PORT});
});